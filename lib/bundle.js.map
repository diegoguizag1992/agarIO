{"version":3,"sources":["webpack:///webpack/bootstrap 8ee66ba5b22411434ec0","webpack:///./lib/cell.js","webpack:///./lib/human_player.js","webpack:///./lib/board.js","webpack:///./lib/game.js","webpack:///./lib/iterator.js","webpack:///./lib/rectangle.js","webpack:///./lib/util.js","webpack:///./lib/agar.js","webpack:///./lib/builder.js","webpack:///./lib/camera.js","webpack:///./lib/computer_player.js","webpack:///./lib/food.js","webpack:///./lib/singleton.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA,2CAA2C,cAAc;;QAEzD;QACA;QACA;QACA;QACA;QACA;QACA;QACA,KAAK;QACL;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;;;;;;;;AC/DA,gBAAgB,mBAAO,CAAC,CAAY;;AAEpC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AClDA,aAAa,mBAAO,CAAC,CAAQ;AAC7B,aAAa,mBAAO,CAAC,CAAQ;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACjHA,aAAa,mBAAO,CAAC,CAAQ;AAC7B,eAAe,mBAAO,CAAC,CAAU;AACjC,oBAAoB,mBAAO,CAAC,CAAgB;AAC5C,cAAc,mBAAO,CAAC,CAAS;AAC/B,kBAAkB,mBAAO,CAAC,CAAa;AACvC,aAAa,mBAAO,CAAC,EAAQ;AAC7B,uBAAuB,mBAAO,CAAC,EAAmB;AAClD,eAAe,mBAAO,CAAC,EAAa;;;AAGpC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;AAED;AACA;AACA;AACA,CAAC,E;;AAED;;;;;;;;;ACrTA,gBAAgB,mBAAO,CAAC,CAAW;;;AAGnC;;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iB;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,0B;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AClCA,cAAc,mBAAO,CAAC,CAAS;AAC/B,aAAa,mBAAO,CAAC,CAAQ;AAC7B,oBAAoB,mBAAO,CAAC,CAAgB;AAC5C,aAAa,mBAAO,CAAC,CAAQ;;AAE7B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH,CAAC;;;;;;;ACjDD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnFA,aAAa,mBAAO,CAAC,CAAQ;AAC7B,kBAAkB,mBAAO,CAAC,CAAa;;AAEvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3EA,aAAa,mBAAO,CAAC,CAAQ;AAC7B,aAAa,mBAAO,CAAC,CAAQ;AAC7B,oBAAoB,mBAAO,CAAC,CAAgB;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,UAAU;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;;AAGP;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACxQA,gBAAgB,mBAAO,CAAC,CAAY;;AAEpC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClDA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8ee66ba5b22411434ec0","\nconst Colores = require('./iterator');\n\nlet color = new Colores().fetchData();\n\nconst FILLS = color;\n\nclass Cell {\n  constructor() {\n    this.mass = 50;\n    this.targetMass = 50;\n    this.realMass = this.mass * 0.8;\n    this.color = FILLS[Math.floor(Math.random() * FILLS.length)];\n\n    setInterval(() => this.grow(), 50);\n  }\n\n  newTargetMass(amt) {\n    this.targetMass += amt;\n  }\n\n  grow() {\n    this.atrophy();\n    let growthAmt = .5;\n\n    if (this.mass + growthAmt < this.targetMass) {\n      this.mass += growthAmt;\n    } else if (this.mass + growthAmt >= this.targetMass) {\n      this.mass = this.targetMass;\n    }\n    this.realMass = this.mass * 0.8;\n  }\n\n  atrophy() {\n    if (this.targetMass > 50) {\n      this.targetMass -= this.mass * 0.001;\n    }\n  }\n\n  draw(ctx, x, y) {\n    ctx.fillStyle = this.color[0];\n    ctx.beginPath();\n    ctx.arc(x, y, this.realMass, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.lineWidth = 4;\n    ctx.strokeStyle = this.color[1];\n    ctx.stroke();\n  }\n}\n\nmodule.exports = Cell;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/cell.js\n// module id = 0\n// module chunks = 0","const Cell = require('./cell');\nconst Util = require('./util');\n\nclass HumanPlayer {\n  constructor(canvasW, canvasH, x, y) {\n    // (x, y) represents the center of the player's cell\n\n    // the players position in the world, NOT THE CANVAS\n    this.x = x;\n    this.y = y;\n\n    this.id = 1;\n\n    this.xView = 0;\n    this.yView = 0;\n\n    // cell position relative to top left viewport corner\n    this.relativeX = 0;\n    this.relativeY = 0;\n\n    // relative mouse pos\n    this.mouseX = null;\n    this.mouseY = null;\n\n    // canvas witdth and height\n    this.canvasW = canvasW;\n    this.canvasH = canvasH;\n\n    this.cell = new Cell();\n    this.util = new Util();\n\n    // this.cell.realMass * 2 = this.cell.realMass * 2;\n    // this.cell.realMass * 2 = this.cell.realMass * 2;\n  }\n\n  senseCells(cellList) {\n    // console.log(cellList);\n    let radius = this.cell.realMass;\n    let humanCoords = [this.x, this.y];\n    let distance;\n    let coords;\n    let foodReturn = null;\n    let eat = null;\n\n    cellList.forEach(player => {\n      if (player.id !== this.id) {\n        coords = [player.x, player.y];\n        distance = this.util.dist(humanCoords, coords);\n        if (distance <= radius &&\n            player.cell.realMass < this.cell.realMass) {\n          eat = player;\n        }\n      }\n    });\n\n    return eat;\n  }\n\n  senseFood(foodStuff) {\n    // playerCell.mass returns the radius of the cell\n    let radius = this.cell.realMass;\n    let playerCoords = [this.x, this.y];\n    let distance;\n    let coords;\n    let foodReturn = null;\n\n    foodStuff.forEach((food, idx) => {\n      coords = [food.x, food.y];\n      distance = this.util.dist(playerCoords, coords);\n      if (distance <= radius) {\n        foodReturn = [food, idx];\n      }\n    });\n    return foodReturn;\n  }\n\n  updateCoords() {\n    this.canvasW = $(window).width();\n    this.canvasH = $(window).height();\n  }\n\n  // step = time (seconds) between frames\n  update(step, worldW, worldH, controls) {\n    // basic player movement control\n    if (controls.left) {\n      this.x -= this.speed * step;\n    }\n\n    if (controls.right) {\n      this.x += this.speed * step;\n    }\n\n    if (controls.up) {\n      this.y -= this.speed * step;\n    }\n\n    if (controls.down) {\n      this.y += this.speed * step;\n    }\n\n    // mouse controlled player movement\n    // ********************************\n    //\n    // grabs the position of the camera's top left corner\n    this.xView = this.x - this.canvasW / 2;\n    this.yView = this.y - this.canvasH / 2;\n\n    if (controls.x && controls.y) {\n      this.mouseX = controls.x;\n      this.mouseY = controls.y;\n\n      this.relativeX = this.x - this.xView;\n      this.relativeY = this.y - this.yView;\n\n      this.relativeXDirection = this.mouseX - this.relativeX;\n      this.relativeYDirection = this.mouseY - this.relativeY;\n\n      // limits movement to a max of 3 and min of -3\n      this.xMovement =\n        Math.min(Math.max(this.relativeXDirection * step, -3), 3);\n      this.yMovement =\n        Math.min(Math.max(this.relativeYDirection * step, -3), 3);\n\n      this.x += this.xMovement;\n      this.y += this.yMovement;\n\n      // console.log(this.relativeXDirection, this.relativeYDirection);\n    }\n\n    // enforce world boundaries inside main world\n    if (this.x - this.cell.realMass / 2 < 2500) {\n      this.x = this.cell.realMass / 2 + 2500;\n    } else if (this.x + this.cell.realMass / 2 > worldW) {\n      this.x = worldW - this.cell.realMass / 2;\n    }\n\n    if (this.y - this.cell.realMass / 2 < 2500) {\n      this.y = this.cell.realMass / 2 + 2500;\n    } else if (this.y + this.cell.realMass / 2 > worldH) {\n      this.y = worldH - this.cell.realMass / 2;\n    }\n  }\n\n  draw(ctx, xView, yView) {\n    ctx.save();\n\n    let xCent = (this.x) - xView;\n    let yCent = (this.y) - yView;\n\n    this.cell.draw(ctx, xCent, yCent);\n\n    ctx.restore();\n  }\n}\n\nmodule.exports = HumanPlayer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/human_player.js\n// module id = 1\n// module chunks = 0","class Board {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.image = null;\n  }\n\n  generate(squareSize) {\n    let ctx = document.createElement('canvas').getContext('2d');\n\n    ctx.canvas.width = this.width;\n    ctx.canvas.height = this.height;\n\n    ctx.save();\n    let bw = this.width;\n    let bh = this.height;\n    let p = 0;\n\n    // longitude\n    for (let i = 0; i <= bw; i += squareSize) {\n      ctx.moveTo(0.5 + i + p, p);\n      ctx.lineTo(0.5 + i + p, bh + p);\n    }\n\n    // latitude\n    for (let i = 0; i <= bh; i += squareSize) {\n      ctx.moveTo(p, 0.5 + i + p);\n      ctx.lineTo(bw + p, 0.5 + i + p);\n    }\n\n    ctx.strokeStyle = 'rgba(78, 81, 82, 0.5)';\n    ctx.stroke();\n    ctx.restore();\n\n    // takes canvas drawing and converts it to an image\n    this.image = new Image();\n    this.image.src = ctx.canvas.toDataURL(\"image/png\");\n\n    // clear ctx\n    ctx = null;\n  }\n\n\n  // xMove/yMove represent change in cell pos\n  // draw(ctx, xMove, yMove, squareSize) {\n  //\n  //   let xStart = xMove % squareSize;\n  //   let yStart = yMove % squareSize;\n  //\n  //   let bw = this.width;\n  //   let bh = this.height;\n  //   let p = 0;\n  //\n  //   // longitude\n  //   for (let i = xStart; i <= bw; i += squareSize) {\n  //     ctx.moveTo(0.5 + (i) + p, p);\n  //     ctx.lineTo(0.5 + (i) + p, bh + p);\n  //   }\n  //\n  //   // latitude\n  //   for (let i = yStart; i <= bh; i += squareSize) {\n  //     ctx.moveTo(p, 0.5 + (i) + p);\n  //     ctx.lineTo(bw + p, 0.5 + (i) + p);\n  //   }\n  //\n  //   ctx.strokeStyle = 'rgba(78, 81, 82, 0.5)';\n  //   ctx.stroke();\n  // }\n\n\n  // old\n  draw(ctx, xView, yView) {\n    // d = destination\n    // s = source\n    // technically crops the background image\n\n    let sx, sy, dx, dy;\n    let sWidth, sHeight, dWidth, dHeight;\n\n    sx = xView;\n    sy = yView;\n\n    sWidth = ctx.canvas.width;\n    sHeight = ctx.canvas.height;\n\n    if (this.image.width - sx < sWidth) {\n      sWidth = this.image.width - sx;\n    }\n\n    if (this.image.height - sy < sHeight) {\n      sHeight = this.image.height - sy;\n    }\n\n    dx = 0;\n    dy = 0;\n\n    dWidth = sWidth;\n    dHeight = sHeight;\n\n    ctx.drawImage(\n      this.image,\n      sx,\n      sy,\n      sWidth,\n      sHeight,\n      dx,\n      dy,\n      dWidth,\n      dHeight\n    );\n  }\n}\n\nmodule.exports = Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/board.js\n// module id = 2\n// module chunks = 0","const Cell = require('./cell');\nconst Camera = require('./camera');\nconst HumanPlayer = require('./human_player');\nconst Board = require('./board');\nconst Rectangle = require('./rectangle');\nconst Food = require('./food');\nconst ComputerPlayer = require('./computer_player');\nconst Comida = require('./singleton');\n\n\n// Configuración:\nconst FPS = 60;\nconst INTERVAL = 1000/FPS;\nconst STEP = INTERVAL/1000;\n\nlet comida = new Comida(750);\nlet comidaGrande = new Comida(1000);\n\nconsole.log(comidaGrande.FOOD);\n\nconst FOOD = comidaGrande.FOOD;\n\nconst WORLD = {\n  height: 8000,\n  width: 8000,\n  boundaryW: 5000,\n  boundaryH: 5000,\n  board: new Board(8000, 8000)\n};\n\nconst CONTROLS = {\n  left: false,\n  right: false,\n  up: false,\n  down: false,\n  x: null,\n  y: null\n};\n\nclass Game {\n  constructor(gameCtx, gameCanvas) {\n    this.cells = [];\n    this.food = [];\n\n    this.gameCtx = gameCtx;\n    this.gameCanvas = gameCanvas;\n\n    this.xCenter = $(window).scrollLeft() + $(window).width() / 2;\n    this.yCenter = $(window).scrollTop() + $(window).height() / 2;\n\n    this.playerList = [];\n    this.eatenFood = [];\n\n    this.squareSize = 75;\n    WORLD.board.generate(this.squareSize);\n\n    this.player =\n      new HumanPlayer(\n        gameCanvas.width,\n        gameCanvas.height,\n        2400,\n        2400\n      );\n\n    this.playerList.push(this.player);\n\n    let startingPositions = [\n      [2750, 2750],\n      [4000, 4000],\n      [3000, 4000],\n      [4000, 3000],\n      [2800, 4800],\n      [],\n      [],\n      [],\n    ];\n\n    for (let i = 0; i < 4; i++) {\n      this.playerList.push(\n        new ComputerPlayer(\n          gameCanvas.width,\n          gameCanvas.height,\n          startingPositions[i][0],\n          startingPositions[i][1],\n          STEP,\n          WORLD,\n          i + 2\n        )\n      );\n    }\n\n    this.camera =\n      new Camera(\n        0,\n        0,\n        gameCanvas.width,\n        gameCanvas.height,\n        WORLD.width,\n        WORLD.height\n      );\n\n    this.camera.follow(\n      this.player\n    );\n\n    this.generateFood();\n\n    setInterval(() => this.newFood(), 750);\n  }\n\n  update() {\n    let prevX = this.player.x;\n    let prevY = this.player.y;\n\n    this.player.update(STEP, WORLD.boundaryW, WORLD.boundaryH, CONTROLS);\n\n    let food, eatObj;\n\n    this.playerList.forEach(player => {\n      if (player instanceof ComputerPlayer) {\n        eatObj = player.ai(this.playerList, this.foodStuff);\n        food = player.senseFood(this.foodStuff);\n      } else {\n        eatObj = player.senseCells(this.playerList);\n        food = player.senseFood(this.foodStuff);\n      }\n      if (eatObj) {\n        this.playerList.forEach((playerCheck, idx) => {\n          if (playerCheck.id === eatObj.id) {\n            let eaten = this.playerList.splice(idx, 1);\n            player.cell.newTargetMass(eaten[0].cell.realMass);\n            eaten = null;\n            if (playerCheck.id === 1) {\n              document.getElementById('lose').style.display = \"flex\";\n            }\n          }\n        });\n        if (this.playerList.length === 1 && this.playerList[0].id === 1) {\n          document.getElementById('win').style.display = \"flex\";\n        }\n      }\n      if (food) {\n        this.foodStuff.splice(food[1], 1);\n        player.cell.newTargetMass(food[0].mass * .75);\n        this.eatenFood.push(food[0]);\n      }\n    });\n\n    this.camera.update();\n  }\n\n  updatePlayerCoords() {\n    this.player.updateCoords();\n  }\n\n  draw() {\n    this\n      .gameCtx\n      .clearRect(0, 0, this.gameCanvas.width, this.gameCanvas.height);\n\n    WORLD\n      .board.draw(this.gameCtx, this.camera.xView, this.camera.yView);\n\n    this.drawFood();\n\n    let toSort = [];\n\n    this.playerList.forEach((player, idx) => {\n      toSort.push([player.cell.mass, idx]);\n    });\n\n    //returns [[mass, idx]] sorted on mass\n    let drawOrder = this.quickSort(toSort);\n    drawOrder.forEach(set => {\n      this.playerList[set[1]]\n        .draw(this.gameCtx, this.camera.xView, this.camera.yView);\n    });\n  }\n\n  // [[mass, idx]]\n  quickSort(array) {\n    if (array.length <= 1) {\n      return array;\n    }\n\n    let pivot = array[0];\n    const left = [];\n    const right = [];\n\n    for (let i = 1; i < array.length; i++) {\n      if (array[i][0] <= pivot[0]) {\n        left.push(array[i]);\n      } else {\n        right.push(array[i]);\n      }\n    }\n\n    return this.quickSort(left)\n      .concat([pivot])\n      .concat(this.quickSort(right));\n  }\n\n  drawFood() {\n    this.foodStuff.forEach(piece => {\n      piece.draw(this.gameCtx, this.camera.xView, this.camera.yView);\n    });\n  }\n\n  generateFood() {\n    let randX;\n    let randY;\n    this.foodCoords = [];\n    this.foodStuff = [];\n\n    for (let i = 0; i < FOOD; i++) {\n      randX =\n        Math.random() *\n        (WORLD.boundaryW / 2 + 3) +\n        WORLD.boundaryW / 2;\n      randY =\n        Math.random() *\n        (WORLD.boundaryH / 2 + 3) +\n        WORLD.boundaryH / 2;\n\n      if (this.foodCoords.includes([randX, randY])) {\n        i--;\n      } else {\n        this.foodCoords.push([randX, randY]);\n        this.foodStuff.push(new Food(randX, randY));\n      }\n    }\n  }\n\n  newFood() {\n    if (this.foodStuff.length < FOOD) {\n      let food =\n        this.eatenFood\n        .splice(\n          Math.floor(Math.random() * this.eatenFood.length),\n          1\n        )[0];\n\n      this.foodCoords.push([food.x, food.y]);\n      this.foodStuff.push(new Food(food.x, food.y));\n      food = null;\n    }\n  }\n\n  run() {\n    this.update();\n    this.draw();\n  }\n\n  add(obj) {\n    if (obj instanceof Cell) {\n      this.cells.push(obj);\n    } else {\n      throw \"unknown object\";\n    }\n  }\n\n  addCell() {\n    this.add(new Cell());\n  }\n\n  play() {\n    this.playerLoop = setInterval(() => {\n      this.run();\n    }, INTERVAL);\n  }\n}\n\nwindow.addEventListener(\"keydown\", (e) => {\n  switch(e.keyCode) {\n    case 37: // left arrow\n      CONTROLS.left = true;\n      break;\n    case 38: // up arrow\n      CONTROLS.up = true;\n      break;\n    case 39: // right arrow\n      CONTROLS.right = true;\n      break;\n    case 40: // down arrow\n      CONTROLS.down = true;\n      break;\n    }\n});\n\nwindow.addEventListener(\"keyup\", (e) => {\n  switch(e.keyCode) {\n    case 37: // left arrow\n      CONTROLS.left = false;\n      break;\n    case 38: // up arrow\n      CONTROLS.up = false;\n      break;\n    case 39: // right arrow\n      CONTROLS.right = false;\n      break;\n    case 40: // down arrow\n      CONTROLS.down = false;\n      break;\n  }\n}); \n\nwindow.addEventListener(\"mousemove\", (e) => {\n  CONTROLS.x = e.pageX;\n  CONTROLS.y = e.pageY;\n});  \n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 3\n// module chunks = 0","\n\nconst Builder = require('./builder');\n\n\n//console.log(listaColores);\n\n\nclass iterator {\n    constructor() {\n\n        this._data = [];\n        this.currentPointer = 0;\n    \n    }\n\n    fetchData(){\n\n        let listaColores = new Builder()\n        .setRojoIntenso()\n        .setRojoOscuro()\n        .setAmarilloIntenso()\n        .setAmarilloOscuro()\n        .setAzulClaro(\"#4a4dff\")\n        .setAzulOscuro(\"#2f3fcf\")\n        .setVioletaClaro(\"#6e3bb5\")\n        .setVioletaOscuro(\"#5c01a1\")\n        .build(); \n\n\n        this._data = [[listaColores.rojo_intenso, listaColores.rojo_oscuro],\n                      [listaColores.amarillo_intenso, listaColores.amarillo_oscuro],\n                      [listaColores.azul_claro, listaColores.azul_oscuro],\n                      [listaColores.violeta_claro, listaColores.violeta_oscuro],\n                      [listaColores.naranja_intenso, listaColores.naranja_oscuro]];\n\n        return this._data;\n    }\n\n    next(){\n        let current = this._data[this.currentPointer];\n        this.currentPointer++\n        return current;\n    }\n\n    hasNext(){\n        return this._data[this.currentPointer]\n    }\n\n}\n\nmodule.exports = iterator;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/iterator.js\n// module id = 4\n// module chunks = 0","class Rectangle {\n  constructor(left, top, width, height) {\n    this.left = left || 0;\n    this.top = top || 0;\n    this.width = width || 0;\n    this.height = height || 0;\n    this.right = this.left + this.width;\n    this.bottom = this.top + this.height;\n  }\n\n  set(left, top, width, height) {\n    this.left = left;\n    this.top = top;\n    this.width = width || this.width;\n    this.height = height || this.height;\n    this.right = (this.left + this.width);\n    this.bottom = (this.top + this.height);\n  }\n\n  within(r) {\n    return (\n      r.left <= this.left &&\n      r.right >= this.right &&\n      r.top <= this.top &&\n      r.bottom >= this.bottom\n    );\n  }\n\n  overlaps(r) {\n    return (\n      this.left < r.right &&\n      r.left < this.right &&\n      this.top < r.bottom &&\n      r.top < this.bottom\n    );\n  }\n}\n\nmodule.exports = Rectangle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/rectangle.js\n// module id = 5\n// module chunks = 0","class Util {\n  // Normalize the length of the vector to 1, maintaining direction.\n  dir (vec) {\n    const norm = Util.norm(vec);\n    return Util.scale(vec, 1 / norm);\n  }\n  // Find distance between two points.\n  dist (pos1, pos2) {\n    return Math.sqrt(\n      Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n    );\n  }\n  // Find the length of the vector.\n  norm (vec) {\n    return Util.dist([0, 0], vec);\n  }\n\n  // Return a randomly oriented vector with the given length.\n  randomVec (length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  }\n\n  genVec (length) {\n    const deg = 2 * Math.PI;\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  }\n\n  // Scale the length of a vector by the given amount.\n  scale (vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  }\n}\n\nmodule.exports = Util;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/util.js\n// module id = 6\n// module chunks = 0","const Board = require('./board');\nconst Cell = require('./cell');\nconst HumanPlayer = require('./human_player');\nconst Game = require('./game');\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const gameElement = document.getElementById('game-canvas');\n  const gameCtx = gameElement.getContext('2d');\n\n  gameElement.width = $(window).width();\n  gameElement.height = $(window).height();\n\n  let board = new Board(8000, 8000);\n  board.generate(75);\n  board.draw(gameCtx, 2500, 2500);\n\n  let game;\n\n  $(window).resize(() => {\n    gameElement.width = $(window).width();\n    gameElement.height = $(window).height();\n    if (board) {\n      board.draw(gameCtx, 2500, 2500);\n    }\n    if (game) {\n      game.updatePlayerCoords();\n    }\n  });\n\n  // document.getElementById('win-button').addEventListener('click', () => {\n  //   document.getElementById('win').style.display = 'none';\n  //   game = new Game(gameCtx, gameElement);\n  //   game.play();\n  // });\n  //\n  // document.getElementById('lose-button').addEventListener('click', () => {\n  //   document.getElementById('lose').style.display = 'none';\n  //   game = new Game(gameCtx, gameElement);\n  //   game.play();\n  // });\n\n  document.getElementById('start-button').addEventListener('click', () => {\n    document.getElementById('start-menu').style.display = \"none\";\n    game = new Game(gameCtx, gameElement);\n    game.play();\n    board = null;\n  });\n\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/agar.js\n// module id = 7\n// module chunks = 0","class Builder {\n  \n  constructor() {\n    this.rojo_intenso = '#ffffff';\n    this.rojo_oscuro = '#ffffff';\n    this.amarillo_intenso = '#ffffff';\n    this.amarillo_oscuro = '#ffffff';\n    this.azul_claro = '';\n    this.azul_oscuro = '';\n    this.violeta_claro = '';\n    this.violeta_oscuro = '';\n    this.naranja_intenso = '#ffab03';\n    this.naranja_oscuro = '#d18d06';\n    this.descripcion = \"Maneja la creación de los diferentes colores de la comida del juego\";\n  }\n\n  setRojoIntenso(){\n    this.rojo_intenso = '#ff2033';\n    return this;\n  }\n\n  setRojoOscuro(){\n    this.rojo_oscuro = '#9e140f';\n    return this;\n  }\n\n  setAmarilloIntenso(){\n    this.amarillo_intenso = '#fff133';\n    return this;\n  }\n  \n  setAmarilloOscuro(){\n    this.amarillo_oscuro = '#ffc70d';\n    return this;\n  }\n\n  setAzulClaro(azul_claro){\n    this.azul_claro = azul_claro;\n    return this;\n  }\n\n  setAzulOscuro(azul_oscuro){\n    this.azul_oscuro = azul_oscuro;\n    return this;\n  }\n\n  setVioletaClaro(violeta_claro){\n    this.violeta_claro = violeta_claro;\n    return this;\n  }\n\n  setVioletaOscuro(violeta_oscuro){\n    this.violeta_oscuro = violeta_oscuro;\n    return this;\n  }\n\n  setNaranjaIntenso(){\n    this.naranja_intenso = this.naranja_intenso;\n    return this;\n  }\n\n  setNaranjaOscuro(){\n    this.naranja_oscuro = this.naranja_oscuro;\n    return this;\n  }\n  \n  build(){\n    return {\n      rojo_intenso: this.rojo_intenso,\n      rojo_oscuro: this.rojo_oscuro,\n      amarillo_intenso: this.amarillo_intenso,\n      amarillo_oscuro: this.amarillo_oscuro,\n      azul_claro: this.azul_claro, \n      azul_oscuro: this.azul_oscuro,\n      violeta_claro: this.violeta_claro,\n      violeta_oscuro: this.violeta_oscuro,\n      naranja_intenso: this.naranja_intenso,\n      naranja_oscuro: this.naranja_oscuro,\n      descripcion: this.descripcion\n    };\n  }\n}\n\nmodule.exports = Builder;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/builder.js\n// module id = 8\n// module chunks = 0","const Game = require('./game');\nconst Rectangle = require('./rectangle');\n\nconst AXIS = {\n  NONE: \"none\",\n  HORIZONTAL: \"horizontal\",\n  VERTICAL: \"vertical\",\n  BOTH: \"both\"\n};\n\nclass Camera {\n  constructor(xView, yView, canvasW, canvasH, worldW, worldH) {\n    // corner of camera\n    this.xView = xView || 0;\n    this.yView = yView || 0;\n\n    // Don't need dead zone\n\n    this.wView = canvasW;\n    this.hView = canvasH;\n    this.worldW = worldW;\n    this.worldH = worldH;\n\n    this.axis = AXIS.BOTH;\n    this.followed = null;\n    this.viewportRect =\n      new Rectangle(this.xView, this.yView, this.wView, this.hView);\n    this.worldRect = new Rectangle(0, 0, worldW, worldH);\n  }\n\n  follow(gameObj) {\n    this.followed = gameObj;\n  }\n\n  update() {\n    if (this.followed !== null) {\n      // wView = canvas width\n      // hView = canvas height\n      // xView, yView = position of camera's top left corner\n      let windowWidth = $(window).width();\n      let windowHeight = $(window).height();\n\n      if ((this.followed.x - windowWidth / 2) > 0 &&\n            (this.followed.x) < this.worldW) {\n          this.xView = this.followed.x - windowWidth / 2;\n      }\n\n      if ((this.followed.y - windowHeight / 2) > 0 &&\n            (this.followed.y) < this.worldH) {\n        this.yView = this.followed.y - windowHeight / 2;\n      }\n\n      this.viewportRect.set(this.xView, this.yView);\n\n      if (!this.viewportRect.within(this.worldRect)) {\n        if (this.viewportRect.left < this.worldRect.left) {\n          this.xView = this.worldRect.left;\n        }\n\n        if (this.viewportRect.top < this.worldRect.top) {\n          this.yView = this.worldRect.top;\n        }\n\n        if (this.viewportRect.right > this.worldRect.right) {\n          this.xView = this.worldRect.right - this.wView;\n        }\n\n        if (this.viewportRect.bottom > this.worldRect.bottom) {\n          this.yView = this.worldRect.bottom - this.hView;\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = Camera;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/camera.js\n// module id = 9\n// module chunks = 0","const Cell = require('./cell');\nconst Util = require('./util');\nconst HumanPlayer = require('./human_player');\n\nclass ComputerPlayer {\n  constructor(canvasW, canvasH, x, y, step, world, id) {\n    this.x = x;\n    this.y = y;\n\n    this.step = step;\n    this.world = world;\n\n    this.id = id;\n\n    this.cell = new Cell();\n    this.util = new Util();\n\n    this.cursor = [0, 40];\n  }\n\n  ai(playerList, foodStuff) {\n    let radius = this.cell.realMass;\n    let computerCoords = [this.x, this.y];\n    let distance;\n    let coords;\n    let eatObj = null;\n    this.nearbyPlayer = false;\n\n    playerList.forEach(obj => {\n      coords = [obj.x, obj.y];\n      distance = this.util.dist(computerCoords, coords);\n      if ((obj instanceof ComputerPlayer ||\n          obj instanceof HumanPlayer) &&\n          obj.id !== this.id &&\n          distance < 350 + this.cell.realMass / 2) {\n\n        if (distance <= radius &&\n            obj.cell.realMass < this.cell.realMass) {\n          eatObj = obj;\n        } else if (distance > radius &&\n                   obj.cell.realMass > this.cell.realMass) {\n          // RUN\n          this.nearbyPlayer = true;\n\n          this.run(obj, obj.x, obj.y);\n        } else if (distance > radius &&\n                   obj.cell.realMass < this.cell.realMass) {\n          // CHASE\n          this.nearbyPlayer = true;\n\n          this.chase(obj);\n        }\n      } else {\n        this.nearbyPlayer = false;\n      }\n    });\n\n    if (!this.nearbyPlayer) {\n      this.chaseFood(foodStuff);\n    }\n\n    return eatObj;\n  }\n\n  run(player, otherX, otherY) {\n    let checkX, checkY, rads;\n    let checkCoords = [];\n    let wallNorth = false;\n    let wallEast = false;\n    let wallSouth = false;\n    let wallWest = false;\n    let wallSense = 200;\n\n    if (this.x + wallSense > 5000) {\n      wallEast = true;\n    }\n\n    if (this.x - wallSense < 2500) {\n      wallWest = true;\n    }\n\n    if (this.y + wallSense > 5000) {\n      wallSouth = true;\n    }\n\n    if (this.y - wallSense < 2500) {\n      wallNorth = true;\n    }\n\n    for (let i = 0; i <= 360; i += 15) {\n      rads = i * Math.PI / 180;\n      checkX = 50 * Math.cos(rads);\n      checkY = 50 * Math.sin(rads);\n\n      if (wallNorth && wallWest) {\n        if (i === 90 || i === 360) {\n          checkCoords.push([checkX, checkY]);\n        }\n      } else if (wallWest && wallSouth) {\n        if (i === 360 || i === 270) {\n          checkCoords.push([checkX, checkY]);\n        }\n      } else if (wallSouth && wallEast) {\n        if (i === 180 || i === 270) {\n          checkCoords.push([checkX, checkY]);\n        }\n      } else if (wallEast && wallNorth) {\n        if (i === 90 || i === 180) {\n          checkCoords.push([checkX, checkY]);\n        }\n      } else if (wallNorth && (i < 180 || i > 0)) {\n        checkCoords.push([checkX, checkY]);\n      } else if (wallWest && (i < 90 || i > 270)) {\n        checkCoords.push([checkX, checkY]);\n      } else if (wallSouth && (i < 360 && i > 180)) {\n        checkCoords.push([checkX, checkY]);\n      } else if (wallEast && (i < 270 || i > 90)) {\n        checkCoords.push([checkX, checkY]);\n      } else if (!wallEast && !wallSouth && !wallNorth && !wallWest) {\n        checkCoords.push([checkX, checkY]);\n      }\n    }\n\n    let maxDistance, maxDistanceCoords, distance;\n\n    checkCoords.forEach(set => {\n      distance =\n        this\n          .util\n          .dist([player.x, player.y], [set[0] + this.x, set[1] + this.y]);\n      if (!maxDistance || distance >= maxDistance) {\n        maxDistance = distance;\n        maxDistanceCoords = set;\n      }\n    });\n\n    this.cursor = maxDistanceCoords;\n\n    this.x += maxDistanceCoords[0] * this.step * 2;\n    this.y += maxDistanceCoords[1] * this.step * 2;\n\n    this.enforceBarrier();\n  }\n\n  chase(target) {\n    let rads, checkX, checkY;\n    let checkCoords = [];\n\n    for (let i = 0; i <= 360; i += 15) {\n      rads = i * Math.PI / 180;\n      checkX = 50 * Math.cos(rads);\n      checkY = 50 * Math.sin(rads);\n      checkCoords.push([checkX, checkY]);\n    }\n\n    let minDistanceCoords, minDistance, distance;\n\n    checkCoords.forEach(set => {\n      distance =\n      this.util.dist(\n        [set[0] + this.x, set[1] + this.y],\n        [target.x, target.y]);\n      if (!minDistance || distance < minDistance) {\n        minDistance = distance;\n        minDistanceCoords = set;\n      }\n    });\n\n    this.cursor = minDistanceCoords;\n\n    this.x += minDistanceCoords[0] * this.step * 1.5;\n    this.y += minDistanceCoords[1] * this.step * 1.5;\n\n    this.enforceBarrier();\n  }\n\n  enforceBarrier() {\n    if (this.x - this.cell.realMass / 2 < 2500) {\n      this.x = this.cell.realMass / 2 + 2500;\n    } else if (this.x + this.cell.realMass / 2 > 5000) {\n      this.x = 5000 - this.cell.realMass / 2;\n    }\n\n    if (this.y - this.cell.realMass / 2 < 2500) {\n      this.y = this.cell.realMass / 2 + 2500;\n    } else if (this.y + this.cell.realMass / 2 > 5000) {\n      this.y = 5000 - this.cell.realMass / 2;\n    }\n  }\n\n  chaseFood(foodStuff) {\n    if (!this.nearbyPlayer) {\n      let rads, checkX, checkY;\n      let checkCoords = [];\n\n      for (let i = 0; i <= 360; i += 15) {\n        rads = i * Math.PI / 180;\n        checkX = 50 * Math.cos(rads);\n        checkY = 50 * Math.sin(rads);\n        checkCoords.push([checkX, checkY]);\n      }\n\n      let minDistanceCoords, minDistance, distance;\n\n      checkCoords.forEach(set => {\n        if (this.nearbyPlayer) {\n          return;\n        }\n        foodStuff.forEach(food => {\n          if (this.nearbyPlayer) {\n            return;\n          }\n          distance =\n          this.util.dist(\n            [set[0] + this.x, set[1] + this.y],\n            [food.x, food.y]);\n            if (!minDistance || distance < minDistance) {\n              minDistance = distance;\n              minDistanceCoords = set;\n            }\n        });\n      });\n\n\n      this.cursor = minDistanceCoords;\n\n      this.x += minDistanceCoords[0] * this.step * 1.5;\n      this.y += minDistanceCoords[1] * this.step * 1.5;\n\n      this.enforceBarrier();\n    } else {\n      return;\n    }\n  }\n\n  senseFood(foodStuff) {\n    // computerCell.mass returns the radius of the cell\n    let radius = this.cell.realMass;\n    let computerCoords = [this.x, this.y];\n    let distance;\n    let coords;\n    let foodReturn = null;\n\n    foodStuff.forEach((food, idx) => {\n      coords = [food.x, food.y];\n      distance = this.util.dist(computerCoords, coords);\n      if (distance <= radius) {\n        foodReturn = [food, idx];\n      }\n    });\n    return foodReturn;\n  }\n\n  draw(ctx, xView, yView) {\n    ctx.save();\n\n    let relativeX = (this.x) - xView;\n    let relativeY = (this.y) - yView;\n\n    this.cell.draw(ctx, relativeX, relativeY);\n\n    ctx.restore();\n  }\n}\n\nmodule.exports = ComputerPlayer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/computer_player.js\n// module id = 10\n// module chunks = 0","\nconst Colores = require('./iterator');\n\nlet color = new Colores().fetchData();\n\nconst MASSES = [1, 2];\nconst FILLS = color;\n\nconsole.log(FILLS);\n\nclass Food {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n\n    this.targetX = x;\n    this.targetY = y;\n\n    this.mass = MASSES[Math.floor(Math.random() * MASSES.length)];\n    this.color = FILLS[Math.floor(Math.random() * FILLS.length)];\n\n    // setInterval(() => this.meander(), 50);\n  }\n\n  meander() {\n    let plusOrMinus = Math.random() < 0.5 ? -1 : 1;\n    let randX = Math.random() * plusOrMinus * 0.1;\n    let randY = Math.random() * plusOrMinus * 0.1;\n\n    this.x += randX;\n    this.y += randY;\n  }\n\n  draw(ctx, xView, yView) {\n    ctx.fillStyle = this.color[0];\n    ctx.beginPath();\n\n    this.relativeX = this.x - xView;\n    this.relativeY = this.y - yView;\n\n    // enforce world bounds\n\n    ctx.beginPath();\n    ctx.arc(this.relativeX, this.relativeY, this.mass * 4, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = this.color[1];\n    ctx.stroke();\n  }\n}\n\nmodule.exports = Food;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/food.js\n// module id = 11\n// module chunks = 0","\nclass Comida {\n    constructor(FOOD) {\n\n        this.FOOD = FOOD;\n\n        if (typeof Comida.instance === 'object') {\n            return Comida.instance;\n        }\n\n        Comida.instance = this;\n        return this;\n    }\n}\n\nmodule.exports = Comida;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/singleton.js\n// module id = 12\n// module chunks = 0"],"sourceRoot":""}